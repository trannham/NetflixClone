{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\SNAART\\\\Desktop\\\\ReactNative\\\\NetflixClone\\\\components\\\\VideoPlayer\\\\index.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Video } from 'expo-av';\nimport styles from \"./styles\";\n\nvar VideoPlayer = function VideoPlayer(props) {\n  var episode = props.episode;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  var video = useRef(null);\n  useEffect(function () {\n    if (!video) {\n      return;\n    }\n\n    (function _callee() {\n      var _video$current, _video$current2;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(video == null ? void 0 : (_video$current = video.current) == null ? void 0 : _video$current.unloadAsync());\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(video == null ? void 0 : (_video$current2 = video.current) == null ? void 0 : _video$current2.loadAsync({\n                uri: episode.video\n              }, {}, false));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, [episode]);\n  console.log(episode);\n  return React.createElement(Video, {\n    ref: video,\n    style: styles.video,\n    source: {\n      uri: episode.video\n    },\n    posterSource: {\n      uri: episode.poster\n    },\n    posterStyle: {\n      resizeMode: 'cover'\n    },\n    usePoster: true,\n    useNativeControls: true,\n    resizeMode: \"contain\",\n    onPlaybackStatusUpdate: function onPlaybackStatusUpdate(status) {\n      return setStatus(function () {\n        return status;\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default VideoPlayer;","map":{"version":3,"sources":["C:/Users/SNAART/Desktop/ReactNative/NetflixClone/components/VideoPlayer/index.tsx"],"names":["React","useRef","useState","useEffect","Video","styles","VideoPlayer","props","episode","status","setStatus","video","current","unloadAsync","loadAsync","uri","console","log","poster","resizeMode"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AAEA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAOC,MAAP;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAA6B;AAAA,MACrCC,OADqC,GACzBD,KADyB,CACrCC,OADqC;;AAAA,kBAGjBN,QAAQ,CAAC,EAAD,CAHS;AAAA;AAAA,MAGtCO,MAHsC;AAAA,MAG9BC,SAH8B;;AAI7C,MAAMC,KAAK,GAAGV,MAAM,CAAW,IAAX,CAApB;AAEAE,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACQ,KAAL,EAAY;AACR;AACH;;AACD,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACSA,KADT,sCACSA,KAAK,CAAEC,OADhB,qBACS,eAAgBC,WAAhB,EADT;;AAAA;AAAA;AAAA,+CAESF,KAFT,uCAESA,KAAK,CAAEC,OAFhB,qBAES,gBAAgBE,SAAhB,CACF;AAAEC,gBAAAA,GAAG,EAAEP,OAAO,CAACG;AAAf,eADE,EAEF,EAFE,EAGF,KAHE,CAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAQH,GAZQ,EAYN,CAACH,OAAD,CAZM,CAAT;AAeAQ,EAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ;AACA,SACI,oBAAC,KAAD;AACI,IAAA,GAAG,EAAEG,KADT;AAEI,IAAA,KAAK,EAAEN,MAAM,CAACM,KAFlB;AAGI,IAAA,MAAM,EAAE;AACJI,MAAAA,GAAG,EAAEP,OAAO,CAACG;AADT,KAHZ;AAMI,IAAA,YAAY,EAAE;AACVI,MAAAA,GAAG,EAAEP,OAAO,CAACU;AADH,KANlB;AASI,IAAA,WAAW,EAAE;AACTC,MAAAA,UAAU,EAAE;AADH,KATjB;AAYI,IAAA,SAAS,EAAE,IAZf;AAaI,IAAA,iBAAiB,MAbrB;AAcI,IAAA,UAAU,EAAC,SAdf;AAeI,IAAA,sBAAsB,EAAE,gCAAAV,MAAM;AAAA,aAAIC,SAAS,CAAC;AAAA,eAAMD,MAAN;AAAA,OAAD,CAAb;AAAA,KAflC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAmBH,CAzCD;;AA2CA,eAAeH,WAAf","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\r\nimport { View, Text } from 'react-native'\r\nimport { Video } from 'expo-av';\r\nimport { Episode } from '../../types';\r\nimport styles from './styles';\r\nimport { Playback } from 'expo-av/build/AV';\r\n\r\ninterface VideoPlayerProps {\r\n    episode: Episode;\r\n}\r\n\r\nconst VideoPlayer = (props: VideoPlayerProps) => {\r\n    const { episode } = props;\r\n\r\n    const [status, setStatus] = useState({});\r\n    const video = useRef<Playback>(null);\r\n\r\n    useEffect(() => {\r\n        if (!video) {\r\n            return;\r\n        }\r\n        (async () => {\r\n            await video?.current?.unloadAsync();\r\n            await video?.current?.loadAsync(\r\n                { uri: episode.video },\r\n                {},\r\n                false\r\n            );\r\n        })();\r\n    }, [episode])\r\n\r\n\r\n    console.log(episode);\r\n    return (\r\n        <Video\r\n            ref={video}\r\n            style={styles.video}\r\n            source={{\r\n                uri: episode.video,\r\n            }}\r\n            posterSource={{\r\n                uri: episode.poster,\r\n            }}\r\n            posterStyle={{\r\n                resizeMode: 'cover',\r\n            }}\r\n            usePoster={true}\r\n            useNativeControls\r\n            resizeMode=\"contain\"\r\n            onPlaybackStatusUpdate={status => setStatus(() => status)}            \r\n        />\r\n    )\r\n}\r\n\r\nexport default VideoPlayer;\r\n"]},"metadata":{},"sourceType":"module"}